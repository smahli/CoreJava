public class Thread implements Runnable {

    //constructors
    1.Thread()
    2.Thread(Runnable target)
    3.Thread(String name)
    4.Thread(Runnable target, String name)
    5.Thread(ThreadGroup tg,Runnable target)
    6.Thread(Thread group tg , String name)
    7.Thread(Thread group tg , Runnable target, String name)
    8.Thread(Thread group tg, Runnable target,String name, Long String Size )


        // methods

   1. basic method 

 run()
 currentThread()
 start()
 isalive()


2.  Naming method  
	getName()
                   
	 setName(String name)
	
                       
3.  Deamon Thread Method 
	setDaemon(boolean b)
                           
	 isDaemon()
                               
4.  Priority based method
				
	
	getPriority()
                                   
	 setPriority(int p)
5. Preventing Thread execution method


            sleep(time)
                                          
	  yield()
                                               
	 join()
                                                   
	 suspend() // not in the java now
                                                       
	 resume()
                                                           
	 stop()
                                                               
	 destroy() // not in the java by now

                                                                 
6. Interupting methods
   interrpt()
                                                                  
      isInterrupted()
                                                                           
 interrupted()

7. Interthread communication

wait()
notify()
notifyall()

all belongs to object class not thread class
 but used in Thread class




}





USES OF setName(String str) and getName()


exaples by coding 



import java.lang.Thread;
public class Thread1 extends Thread {
    public void run(){
        System.out.println("Thread Task");
        Thread.currentThread().setName("TestThread");
        System.out.println(Thread.currentThread().getName());// Thread 0 name changed to TestThread
    }


    public static void main(String[] args) {

        Thread1 t1 = new Thread1();
        t1.start();

        System.out.println("Hello");
        // main thread is created by JVM (Internal work)

        System.out.println(Thread.currentThread().getName());  // main Thread
        //Thread.currentThread().setName("shiw");  // can change the name of main thread
     //   System.out.println(Thread.currentThread().getName());  // we have changed the name of main thread to shiw
       // System.out.println(10/0);   // can check by this exception method

    }
}




DaeMon Thread
__________________________________
which runs on the background of another thread
2. It provides service to the Threads 
3. garbage collector, finalizer , Attach listener, Signal dispatcher
4. Methods 
	public final void setDaemon(boolean b)
	public final boolean isDaemon()




example code



import java.lang.Thread;
public class Thread2 extends Thread {
    public  void run(){
        System.out.println("child Thread");
    }

    public static void main(String[] args) {
        System.out.println("Main Thread");
        Thread2 t2 = new Thread2();
        t2.setDaemon(true); // make sure declare daemon before start()   opposite will throw exception
        t2.start();
    }

}
		// Hence we Cannot create main Thread as Daemon Thread 
		// daemon Thread's life depend upon the thread 


		// daemon Thread nature :It inherites the properties from its Parent thread 
		//JVM role on the daemon Thread : It will kill the daemon thread and doesnot depend upon The daemon Thread It will take daemon thread to dead state

		//Most of the times daemon thread has low priority but according to us we can change the priority.
		






sleep() method 
__________________

public static native void sleep(long milisecond)  Throws InterruptedException

public static void sleep(long milisecond , int nanosecond) ThrowsException



coding Example



import java.lang.Thread;
public class SleepMethod  extends Thread {
    @Override
    public void run() {
        for (int i=1;i<=5;i++){

            try {
                Thread.sleep(1000);
                System.out.println(i);
            }
            catch (Exception e) {
                System.out.println(e);

            }

        }

    }

    public static void main(String[] args) {

        SleepMethod s = new SleepMethod();
        s.start();

    }
}



