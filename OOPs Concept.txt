
OOP's 
Class
Object & Methods 

----------------------------------------|
					|
					|
					|
					|
-Inheritance(IS -A relationship)	|	
-HAS-A Relationship			|___________     Main Purpose of These are CODE REUSABILITY
-Polymorphism				|
	Method Overloading		|
	Method Overriding		|
					|
					|
----------------------------------------

----------------------------------
Security			|
1.Abstacrion			|
2.Data Hiding			|_______________   SECURITY 
3.Encapsulation			|
4.Tighly Coupled Classes	|
---------------------------------







OOP : Object oriented Programming System/Structure(smalltalk,Java, C sharp , C++ Python)
1. Class
2.Methods
3.Objects
	Different ways of Creating Obejct
	Programs
	How to initialize Object
OOP is a programming paradigm/Methodology

		object oriented paradigm
		structural paradigm 
		functional paradigm
		logical paradigm

Six main pillars of OOPs are 
1.class
2.Objects and Methods
3.Inheritance
4.Polymorphism
5.Abstraction
6.Encapsulation

			CLASS
		_____________________

1.Class is the collection of Objects
2.Class is not a real world entity. It is just a template/blueprint/prototype
3.Class does not occupy memory(Since it not  real world entity).
4.syntax   access-modifier class ClassName{
	   methods 
	   constructors
	   fields
	   blocks
	   nested class

	   }

			METHODS
	         __________________
1. A set of codes which performs a perticular task
2. Advantage of methods
	a) Code reusability
	b) Code optimization
3 Syntax	 access-modifier return type methodName(List of parameters){
		 }

			Object
		____________________
1. Object is an instance of class
2. Object is real world entity.
3. Object occupies memory.

Object consist of :
	1.Identity
	2.state/Attributes
	3.Behaviour

How to create an object: 
	using "new" Keyword
	using Instance()method
	using clone() menthod
	using deserialization
	factory method

	creation of method using "new keyword"	
	1.declaration: Animal kishu;
	2.Instantiation: kishu = new  
	3.initialization: Animal(constructor)  "line 2 ans 3 are used in same line"
in one line  syntax: " Animal kishu = new Animal();" 


How to initialize object 
		1. By reference variable
		2.By Constructores
		3. By using method
		CONSTRUCTOR
	__________________________

1. Constructor is a block(similar to method having same name as class Name)
2. Constructor does not have return type even "void ".
3. the only modifiers applicable for constructors public protected default and private.
4.It executes automatically when we creates Object.

Constructor is used to initialize object.

Types of Constructor 
1. Default Constructor(no argument Constructor) Created by Compiler not by JVM
2.No argument Constructor (User defined)
3.parametrized Constructor 

Exampla of Default Constructor

	public class Test {
		Test(){
			super();
		}
            // If we don't create a Constructor here then Compiler automatically creates a Constructor that is known as Default constructor

    public static void main(String[] args) {
        Test t = new Test();
    }
}

 



		ABSTACTION
		_______________
Abstraction is hiding internal implementation and just highlighting the setup services that we are offering.

Achieved by 
	Abtract Class(0-100%)
	Interfaces (100%)

	1. A method without body(no  implementation) is known as abstract method.
	2. A method must always be declared in an abstract class, or we can say that
	if a class has an abstract method , it should be declared abstract as well.
	3.If a regular class extends an abstract class, then the class must have to implement
	all the abstract methods of abstract parebt class or it has to be declared abstract as well. 
	4.Abstract methods in an abstract class are meant to be overriden in derived 
	concrete classes otherwise compile time error will be thrown.
	5. Abstract classes cannot be instantiated , means we can;;'t create an object of Abtract class.

	



Abstract Code Exmample

_____________________________



public abstract class Vehicle {
    int no_of_Tyres;

    abstract void start();
}
class Car extends Vehicle{
    @Override
    void start() {
        System.out.println(" Car Starts with Key");
    }
}

class Scooter extends Vehicle{
    @Override
    void start() {
        System.out.println(" Scooter starts with kick");
    }

    public static void main(String[] args) {
        //Vehicle v= new Vehicle();    // Why because Vehicle is abstract it cannot be instantiated mean we cannot create object of abstract class
        Car c = new Car();
        Scooter s = new Scooter();
        c.start();
        s.start();
    }
}




OUTPUT
_________________________


"C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.1\lib\idea_rt.jar=56948:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.1\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\Asus\IdeaProjects\Inheritance\out\production\Inheritance Scooter
 Car Starts with Key
 Scooter starts with kick

Process finished with exit code 0



INTERFACE CODE EXAPMLE
______________________________

public interface InterfaceExample {


    int Var=10;  // compiler automatically adds public static final
    public static final int Var2 =20;
   abstract  public  void display();
  // protected abstract void Display();  // modifier protected not allowed here
 //   default  abstract void show();    // default and abstract illegal combination
   /* void display(){
        // interface abstract method cannot have bodies
    }*/


    default  void Show(){
        System.out.println("Default method having body is allowed ");
    }


    static  void Dis(){
        System.out.println(" Static method having body is allowed here");
    }

}
 interface InterfaceExample2{
    void Show2();

}
class Test implements InterfaceExample,InterfaceExample2{
    /* void display(){
        System.out.println("Interface Example");   // attempting to assign weaker access privileges ; was public
    }*/                                             // we need to declare same method access modifier as It was in Interface

     public  void display() {
        System.out.println("Interface Example");
    }

    @Override
    public void Show2() {
        System.out.println(" Multiple inheritance As Show2 is overridden and Implements via second interface");
    }

    public static void main(String[] args) {
        // InterfaceExample i1 = new InterfaceExample()// Interface is abstract cannot be instantiated or object cannot be created


        Test t = new Test();
        t.display();
        t.Show2();

    }
}


OUTPUT
________________

"C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.1\lib\idea_rt.jar=55235:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.1\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\Asus\IdeaProjects\Inheritance\out\production\Inheritance Test
Interface Example
 Multiple inheritance As Show2 is overridden and Implements via second interface

Process finished with exit code 0








