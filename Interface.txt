Interfaces are similar to abstract class but having all the methods of abstract type.
Interfaecs are the blueprint of the class. It specify what a class must do and not how.

Interface is a mechanism, which  is used to achieve Abstraction.
It supoorts multiple inheritance.
It can be used to achieve loose coupling.
Loose coupling is a design goa; that seeks to reduce the inter dependecies between components 
of a system with the goal of reducing the risk that changes in one component will require changes in any 
other component .
Loose coupling is much more generic concept intended to increase the flexibility of system, make it more 
maintainable and make the entire framework more stable

Interface Syntax :  	 interface InterfaceName{
			 abstract methods // compiler adds public abstract methods
			
			 fields     //Compiler adds public static final keyword
			 }
	since java 8th version we can also add concrete method(having body) // default/static void method (" Default must be added before method name")
	since java 9th method Private method 
	interface supports multiple inheritance

Iterface can be used to achieve loose  coupling.

			Interface    	   VS     	Abstract
_______________________________

1. Abstract class can have instances methods 		1.Methods of a java interface are implicitly
	that implements a default behaviour.		abstract and cannot have implementations.

2.An abstract class may contain non final variables.	2.Interface contains public , static and final variables only
3. methods and variable can have any access - modifier
	 i.e. public, protected , default and private.	3.Methods and variables are always public
4.Java abstract class should be extended 
	using keyword extends 				4.java interface should be implemented using
5. An abstract class can extend another Java class and 	   keyword"implements"
	implement multiple Java interfaces.		5. An interface can extend another Java interface only



Interface Example with code




public interface InterfaceExample {


    int Var=10;  // compiler automatically adds public static final
    public static final int Var2 =20;
   abstract  public  void display();
  // protected abstract void Display();  // modifier protected not allowed here
 //   default  abstract void show();    // default and abstract illegal combination
   /* void display(){
        // interface abstract method cannot have bodies
    }*/


    default  void Show(){
        System.out.println("Default method having body is allowed ");
    }


    static  void Dis(){
        System.out.println(" Static method having body is allowed here");
    }

}
 interface InterfaceExample2{
    void Show2();

}
class Test implements InterfaceExample,InterfaceExample2{
    /* void display(){
        System.out.println("Interface Example");   // attempting to assign weaker access privileges ; was public
    }*/                                             // we need to declare same method access modifier as It was in Interface

     public  void display() {
        System.out.println("Interface Example");
    }

    @Override
    public void Show2() {
        System.out.println(" Multiple inheritance As Show2 is overridden and Implements via second interface");
    }

    public static void main(String[] args) {
        // InterfaceExample i1 = new InterfaceExample()// Interface is abstract cannot be instantiated or object cannot be created


        Test t = new Test();
        t.display();
        t.Show2();

    }
}

OUTPUT
______________




"C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.1\lib\idea_rt.jar=55235:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.1\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\Asus\IdeaProjects\Inheritance\out\production\Inheritance Test
Interface Example
 Multiple inheritance As Show2 is overridden and Implements via second interface

Process finished with exit code 0
