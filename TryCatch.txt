Whenever there is exception, the method in which exception occurs will 
create an object and that object will store three things :
1. exception name 
2. description
3. stack trace

exception object created then exception object  pass this information to jvm . 
if jvm do not handle it then . jVM will furthur pass this information to default exception handler and same time jvm abnormally terminates 
the program and Default exception hanldler print what type of Exception is


we can handle the exception using 5 keywords 
1. try
2. Catch
3. finally
4. Throw.
5.throws

Syntax:

try{
//risky code
}
catch(ExceptionClassName ref.var.name){
//handling  code
}



public class TryCatch {
    public static void main(String[] args) {
        System.out.println("1");
        try {
            System.out.println("2");

             int a = 100;
             int b=0;
             int c;
            System.out.println("3");

             c=a/b;
            System.out.println("4");

            System.out.println(c);
            System.out.println("5");

        }
         catch (ArithmeticException e){
             System.out.println("6");

             System.out.println(e);
             System.out.println("7");

         }
        System.out.println("hello");

    }
}


Three ways to print Exception information in Java
1.e.printStackTrace();
	1. exception name
	2. description
	3.stack trace
	these all will be printed
2.System.out.println(e)/System.out.println(e.toString)
	1. Exception name
	2. description
	it will not be able to print stack trace.
3. System.out.println(e.getMessage)
	1.desciption
	two things it will not be able to print



see code for example


public class MethodsPrintExcInfo {

        public static void main(String[] args) {
            try {

                int a = 100;
                int b=0;
                int c;

                c=a/b;

                System.out.println(c);

            }
            catch (ArithmeticException e){

             // e.printStackTrace();  // It will print 1. Exception name 2. description 3.stacktrace
              //  System.out.println(e.toString()); or System.out.println(e) // it will print only 1. exception name and description
                System.out.println(e.getMessage());  // it will print only description


            }
            System.out.println("hello");

        }


}


finally block Syntax
_______________

 finally is the block that is always executed whether
 exception is handled or not


Syntax:

try    
	{
		// Risky Code

	}

catch(Exception e )
	{
		//handling code

	}

finally
	{
		//Clean Up code

	}
__________________________________________
otherSyntax



try
	{

		// Risky Code
		//file open
		//read write
	}

finally
	{
		//Clean Up code
		//file close

	}

example code   

public class finally1 {

    public static void main(String[] args) {
        try {
            int i=100, b=0, c;
            c= i/b;
            System.out.println(c);

        }
        catch (Exception e){
            System.out.println("Exception  "+e);
        }
        finally {
            System.out.println("I am in finally block");

        }
    }
}



Why do we use FINALLY BLOCK
_____________________________

if we have opened in Resources/file in  try block then we close that file in finally block.
if any exceprtion occurs while reading or writing a file , then below code will not execute 
and thus resource will not close.


Rules of usage finally block

1.we can use multiple catch block with one try block but we can use only single finally block wwith one try block , not multiple
2.the statements presents in the finally block execute even if the try block contains control transfer statements (i.e. jump statements) like return, break or continue
3. FINALLY BLOCK WILL NOT EXECUTE IF 
		1. the possibilities that disturbs the execution of finally block are 
			using of the System.exit() method.
		2. causing a fatal error that causes the process to abort(eg out of memory error)
		3. Due to an exception arising in the finally block
		4. the death of the thread.



	

