== Oprator and equals() method 
________________________________

== Operaetor is used for refrence comparison(address comparison ).
It means == operator checks if both objects point to the same memory location or not.

.equals() method is used for content comparison(In String class). It means .equals() methods is used to check object value.

for example 

String s1 = new String("shiwshankar");
String s2 = new String("shiwshankar");
System.out.println(s1==s2)  // It will return false 



String s3= "Shambhu"
String s4 = "Shambhu"

System.out.println(s3==s4)  // It will return true .


why Because == operator is used for reference comparison(address comparison). now it 
is(== operator ) checking both objects pointing to the same memory location.


11 methods of the Object class 
1. clone()
2.equals(Object obj)
3. finalize()
4. getClass()
5. hashCode()
6. notify()
7. notifyAll()
8. toString()
9. wait()
10. wait(long timeout)
11. wait(long timout int nanos)

class Object{
	public boolean equals(Object obj){
	return(this==obj)    // .equals() method of Object class is used to compare the reference
			// or address of two objects .i.e if two objects point to the same memory location or not

	}
}


class String extends Object{    
	@override
	public boolean equals(Object obj){   // 
		//statements          		// .equals method of String class is used for content comparison i.e. it is used to 
	// check object value
	}

}

class Demo{
	public static void main(){
	
	String s1= new String("shiwshankar");
	String s2 = new String("shiwshankar");
	System.out.println(s1==s2) ;  // false because it checks memory locations they are different objects.
	System.out.println(s1.equals(s2)) ;     true because it checks content 
	
	}


}


String Class Constructor
_____________________________

Class String{
	public String(){
		// No argument Constructor
	}

	public String(String S){
	
	}
	public String(StringBuffer){
	
	}
}



Why character array is preffered over string for storing password???
__________________________________________________________________

String objects are immutable in java and therefore if password is stored as
 plain text it will be available in memory until Garbage collector clears it 
, but String objects are stored in string constant pool for re uasability and garbage
collection is not applicable in SCP, which is a security threat.
With an array, you can explicitly wipe the data after you are done
with it.
You can over write the array with anything you like , and the password won't be present anywhere in the system - even before garbage collection.


length() method isEmpty() and trim() in java
___________________________________________________


The String length() counts the number of characters in the string and returns it in integer. This method returns the length of any string which is equal to the number of 16 bit Unicode characters in the string.


isEmpty() method of String class is included in java since JDK 1.6
This method returns true if the given string is empty , else it returns false, or can
say that this method returns true if the length of the string is 0.


trim() method of String class eliminates only leading and trailing spaces 
The Unicode value of space character is '\u0020'.The trim() method in java checks 
this Unicode value before and after the string , if it exists then removes the spaces and returns the ommited String.


concat(String str)  method concatenates one string to the end of another string .
This method returns a string with the value of the string passed into the method 
appended to the end of the string.


join(CharSequence delimiter , CharSequence .. elements ) is the static
method which concatenates the given elements with the delimiter and returns the concatenated string.It
was included in JDK 1.8 version.
Note that if an element is null, then null is added and if delimiter is null then it will throw "java.lang.NullPointerException".


The subSequence(int beginIndex, int endIndex) method returns a CharSequence. The subsequence starts with the char value at the specified 
index and ends with the char value at (end -1).
It throws java.lang.StringIndexOutOfBoundsException exception if any index position value is negative.



There are two substring methods of String class i.e. substring(int beginIndex) and substring(int beginIndex , int endIndex). It returns a new string that is a substring of this string.
The substring begins at the specified beginIndex and extends to the character at Index endIndex -1.


public class ConcatString {
    public static void main(String[] args) {
        String s1 = new String("shiwshankar");
        String s2 =new String("java");



        System.out.println(s1+s2);   // output will be shiwshankarjava
        System.out.println(s1+10);  // output will be shiwshankar10

        System.out.println(s1+10+20);   // output will be shiwshankar1020
        System.out.println(10+20+s1);   // output will be 30shiwshankar    why ?????   + operator works left to right  first 10 and 20 will be added

        System.out.println(10+s1+20);       // output will be 10shiwshankar20   because first 10 and s1 will be concatenated
        System.out.println(s1+20/10);     // output will be shiwshankar2    because preference will be to / operator

        //System.out.println(s1+10-5);    // it will show an error

        System.out.println(s1.concat(s2));   // shiwshankarjava will be the output


       // System.out.println(String.join(null,s1,s2));// it will throw NullPointerException
        System.out.println(String.join(" & ",s1,s2));

        String s = new String("Hello there this is shiwshankar");

        System.out.println(s.subSequence(3,10));


        System.out.println(s.substring(3,10));
        System.out.println(s.substring(3));
        System.out.println(s.substring(0,0));    // show empty string
    }
}


